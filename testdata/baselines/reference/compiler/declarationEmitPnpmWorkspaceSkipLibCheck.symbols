//// [tests/cases/compiler/declarationEmitPnpmWorkspaceSkipLibCheck.ts] ////

=== /node_modules/.pnpm/@base-lib+react@1.0.0/node_modules/@base-lib/react/index.d.ts ===
export { Tooltip } from "./esm/Tooltip";
>Tooltip : Symbol(Tooltip, Decl(index.d.ts, 0, 8))

=== /node_modules/.pnpm/@base-lib+react@1.0.0/node_modules/@base-lib/react/esm/Tooltip.d.ts ===
import { InternalUtil } from "./utils/internal";
>InternalUtil : Symbol(InternalUtil, Decl(Tooltip.d.ts, 0, 8))

export interface TooltipProps { content: string; }
>TooltipProps : Symbol(TooltipProps, Decl(Tooltip.d.ts, 0, 48))
>content : Symbol(TooltipProps.content, Decl(Tooltip.d.ts, 1, 31))

export declare const Tooltip: TooltipProps & { __internal: InternalUtil };
>Tooltip : Symbol(Tooltip, Decl(Tooltip.d.ts, 2, 20))
>TooltipProps : Symbol(TooltipProps, Decl(Tooltip.d.ts, 0, 48))
>__internal : Symbol(__internal, Decl(Tooltip.d.ts, 2, 46))
>InternalUtil : Symbol(InternalUtil, Decl(Tooltip.d.ts, 0, 8))

=== /node_modules/.pnpm/@base-lib+react@1.0.0/node_modules/@base-lib/react/esm/utils/internal.d.ts ===
// Internal utility type - should not be referenceable due to exports field
export interface InternalUtil { __private: never; }
>InternalUtil : Symbol(InternalUtil, Decl(internal.d.ts, 0, 0))
>__private : Symbol(InternalUtil.__private, Decl(internal.d.ts, 1, 31))

=== /node_modules/@base-lib/react/index.d.ts ===

export * from "../../.pnpm/@base-lib+react@1.0.0/node_modules/@base-lib/react/index.d.ts";

=== /src/component.ts ===
import { Tooltip } from "@base-lib/react";
>Tooltip : Symbol(Tooltip, Decl(component.ts, 0, 8))

// This function returns a value whose inferred type includes Tooltip with its internal types.
// Without syntacticNodeBuilder, tsgo will:
// 1. Analyze the function body to infer the return type
// 2. Encounter Tooltip type which has __internal: InternalUtil
// 3. Try to serialize InternalUtil type
// 4. Fail to generate clean specifier (blocked by exports)
// 5. Fall back to relative path through .pnpm directory
// 6. With skipLibCheck, should suppress error instead of reporting TS2742
export function createComponent() {
>createComponent : Symbol(createComponent, Decl(component.ts, 0, 42))

  return {
    data: Tooltip
>data : Symbol(data, Decl(component.ts, 11, 10))
>Tooltip : Symbol(Tooltip, Decl(component.ts, 0, 8))

  };
}


